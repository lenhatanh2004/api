import fs from 'fs';

class HabitRecommendationEngine {
  constructor(habitSuggestions, questions) {
    this.habitSuggestions = habitSuggestions;
    this.questions = questions;

    // ‚öôÔ∏è Tr·ªçng s·ªë ∆∞u ti√™n theo danh m·ª•c
    this.weights = {
      health: 1.2,
      fitness: 1.1,
      productivity: 1.0,
      learning: 0.9,
      mindful: 1.0,
      finance: 0.8,
      digital: 0.9,
      social: 0.8,
      sleep: 1.1,
      energy: 0.9,
    };

    this.trainedModel = {};
    try {
      const modelData = fs.readFileSync('src/Script/trained_model.json', 'utf8');
      this.trainedModel = JSON.parse(modelData);
      console.log('üß† ƒê√£ t·∫£i trained_model.json th√†nh c√¥ng');
    } catch (err) {
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y trained_model.json ‚Üí d√πng rule-based logic');
    }
  }

  /**
   * ================================
   * 1Ô∏è‚É£ Ph√¢n t√≠ch c√¢u tr·∫£ l·ªùi ng∆∞·ªùi d√πng
   * ================================
   */
  analyzeAnswers(answers) {
    const categoryScores = {};
    const weakAreas = {};

    // Gom ƒëi·ªÉm theo category
    Object.entries(answers).forEach(([questionId, value]) => {
      const category = questionId.split('_')[0];
      if (!categoryScores[category]) categoryScores[category] = [];
      categoryScores[category].push(value);
    });

    // T√≠nh trung b√¨nh v√† x√°c ƒë·ªãnh ƒëi·ªÉm y·∫øu
    const result = {};
    Object.entries(categoryScores).forEach(([category, values]) => {
      const avg = values.reduce((a, b) => a + b, 0) / values.length;
      result[category] = Number(avg.toFixed(2));

      if (avg <= 2) {
        weakAreas[category] = {
          category,
          score: avg,
          priority: this.weights[category] || 1,
        };
      }
    });

    const sortedWeak = Object.values(weakAreas).sort((a, b) => b.priority - a.priority);
    return { categoryScores: result, weakAreas: sortedWeak };
  }

  /**
   * ================================
   * 2Ô∏è‚É£ X√°c ƒë·ªãnh persona
   * ================================
   */
  determinePersona(categoryScores) {
    const personaScores = {
      'health-focused': 0,
      'productivity-driven': 0,
      'knowledge-seeker': 0,
      'mindful-seeker': 0,
      'finance-conscious': 0,
      'balanced-lifestyle': 0,
      'fitness-driven': 0,
      'community-oriented': 0,
    };

    if (categoryScores.health <= 2 || categoryScores.fitness <= 2)
      personaScores['health-focused'] += 30;

    if (categoryScores.productivity <= 2)
      personaScores['productivity-driven'] += 30;

    if (categoryScores.learning <= 2)
      personaScores['knowledge-seeker'] += 30;

    if (categoryScores.mindful <= 2)
      personaScores['mindful-seeker'] += 30;

    if (categoryScores.finance <= 2)
      personaScores['finance-conscious'] += 30;

    if (categoryScores.social <= 2)
      personaScores['community-oriented'] += 25;

    const mediumCount = Object.values(categoryScores).filter(
      (v) => v > 2 && v < 3.5
    ).length;

    if (mediumCount >= 5) personaScores['balanced-lifestyle'] += 25;

    if (categoryScores.fitness <= 2)
      personaScores['fitness-driven'] += 20;

    return Object.entries(personaScores).sort(([, a], [, b]) => b - a)[0][0];
  }

  /**
   * ================================
   * 3Ô∏è‚É£ T√¨m habit ph√π h·ª£p (Rule-based)
   * ================================
   */
  findMatchingHabits(answers, categoryScores) {
    const matchingHabits = [];

    this.habitSuggestions.forEach((habit) => {
      let score = 0;
      let matchedConditions = 0;

      Object.entries(habit.triggerConditions).forEach(([questionId, targetValues]) => {
        if (answers[questionId] && targetValues.includes(answers[questionId])) {
          matchedConditions++;
          score += 10;
        }
      });

      const category = habit.category;
      const userScore = categoryScores[category] ?? 3;

      if (userScore <= 2) score += 20;
      else if (userScore <= 2.5) score += 10;

      const diffBonus = { easy: 15, medium: 10, hard: 5 };
      score += diffBonus[habit.difficulty] || 0;

      if (matchedConditions > 0)
        matchingHabits.push({ ...habit, score, matchedConditions });
    });

    return matchingHabits.sort((a, b) => b.score - a.score);
  }

  /**
   * ================================
   * 4Ô∏è‚É£ ƒêa d·∫°ng danh m·ª•c th√≥i quen
   * ================================
   */
  diversifyRecommendations(habits, max = 5) {
    const selected = [];
    const count = {};

    for (const h of habits) {
      const c = h.category;
      if ((count[c] || 0) < 2) {
        selected.push(h);
        count[c] = (count[c] || 0) + 1;
      }
      if (selected.length >= max) break;
    }

    if (selected.length < max) {
      for (const h of habits) {
        if (!selected.includes(h)) selected.push(h);
        if (selected.length >= max) break;
      }
    }
    return selected;
  }

  /**
   * ================================
   * 5Ô∏è‚É£ Sinh insights c√° nh√¢n
   * ================================
   */
  generateInsights(categoryScores, weakAreas) {
    const messages = {
      health: 'H√£y ch√∫ √Ω ƒë·∫øn s·ª©c kh·ªèe. U·ªëng ƒë·ªß n∆∞·ªõc v√† ng·ªß s·ªõm h∆°n nh√©.',
      productivity: 'Th·ª≠ l·∫≠p k·∫ø ho·∫°ch ng√†y v√† √°p d·ª•ng Pomodoro ƒë·ªÉ l√†m vi·ªác hi·ªáu qu·∫£.',
      learning: 'D√†nh √≠t nh·∫•t 20 ph√∫t m·ªói ng√†y ƒë·ªÉ h·ªçc ho·∫∑c ƒë·ªçc s√°ch.',
      mindful: 'H√£y th·ª≠ thi·ªÅn, h√≠t th·ªü s√¢u v√† th∆∞ gi√£n ƒë·∫ßu √≥c.',
      finance: 'Theo d√µi chi ti√™u h√†ng ng√†y gi√∫p b·∫°n qu·∫£n l√Ω t√†i ch√≠nh t·ªët h∆°n.',
      digital: 'Gi·∫£m th·ªùi gian m√†n h√¨nh s·∫Ω gi√∫p b·∫°n t·∫≠p trung v√† ng·ªß ngon h∆°n.',
      social: 'TƒÉng c∆∞·ªùng k·∫øt n·ªëi v·ªõi b·∫°n b√®, gia ƒë√¨nh gi√∫p b·∫°n c√¢n b·∫±ng c·∫£m x√∫c.',
      fitness: 'H√£y v·∫≠n ƒë·ªông nh·∫π nh√†ng m·ªói ng√†y ƒë·ªÉ duy tr√¨ nƒÉng l∆∞·ª£ng.',
    };

    return weakAreas.map((a) => ({
      category: a.category,
      message: messages[a.category],
      priority: a.priority,
    }));
  }

  /**
   * ================================
   * 6Ô∏è‚É£ H√†m ch√≠nh: G·ª£i √Ω th√≥i quen
   * ================================
   */
  recommend(answers, maxHabits = 5) {
    const { categoryScores, weakAreas } = this.analyzeAnswers(answers);
    const persona = this.determinePersona(categoryScores);

    let recommendations = this.findMatchingHabits(answers, categoryScores);
    let selectedHabits = this.diversifyRecommendations(recommendations, maxHabits);

    // ‚úÖ K·∫øt h·ª£p v·ªõi AI model
    if (this.trainedModel[persona]) {
      const aiHabits = this.trainedModel[persona].topHabits.map((name) => ({
        name,
        source: 'ai-model',
        score: 100,
        category: 'general',
      }));
      selectedHabits = [...selectedHabits, ...aiHabits];
    }

    const insights = this.generateInsights(categoryScores, weakAreas);

    return {
      persona,
      categoryScores,
      weakAreas,
      insights,
      habits: selectedHabits.slice(0, maxHabits),
      timestamp: new Date().toISOString(),
    };
  }
}

export { HabitRecommendationEngine };